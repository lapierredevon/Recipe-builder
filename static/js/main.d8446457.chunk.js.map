{"version":3,"sources":["RecipeCreate.js","CreateTd.js","RecipeList.js","RecipeData.js","App.js","index.js"],"names":["RecipeCreate","createRecipe","initialData","name","cuisine","photo","ingredients","preparation","useState","tableData","setTableData","handleChange","target","value","onSubmit","event","preventDefault","id","type","onChange","placeholder","rows","CreateTd","recipeDetails","handleDelete","key","src","alt","className","onClick","RecipeList","recipes","recipe","map","index","RecipeData","App","setRecipes","indexDelete","filter","newRecipe","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAkEeA,MA3Df,YAAuC,IAAhBC,EAAe,EAAfA,aAEfC,EAAc,CAClBC,KAAK,GACLC,QAAQ,GACRC,MAAM,GACNC,YAAY,GACZC,YAAa,IAIjB,EAAkCC,mBAASN,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAKQC,EAAe,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OACrBF,EAAa,2BAAID,GAAL,kBAAiBG,EAAOT,KAAMS,EAAOC,UAUjD,OACE,0BAAMV,KAAK,SAASW,SATD,SAACC,GACpBA,EAAMC,iBAENf,EAAaQ,GAEbC,EAAa,eAAIR,MAKf,+BACE,+BACE,4BACE,4BACE,2BAAOe,GAAG,OAAOd,KAAK,OAAOe,KAAK,OAAOC,SAAUR,EAAcE,MAAOJ,EAAUN,KAAMiB,YAAY,UAEtG,4BACA,2BAAOH,GAAG,SAASd,KAAK,UAAUe,KAAK,OAAOC,SAAUR,EAAcE,MAAOJ,EAAUL,QAASgB,YAAY,aAE5G,4BACE,2BAAOH,GAAG,QAAQd,KAAK,QAAQe,KAAK,MAAMC,SAAUR,EAAcE,MAAOJ,EAAUJ,MAAOe,YAAY,WAExG,4BACE,8BAAUH,GAAG,cAAcd,KAAK,cAAckB,KAAM,EAAEF,SAAUR,EAAcE,MAAOJ,EAAUH,YAAac,YAAY,iBAE1H,4BACE,8BAAUH,GAAG,cAAcd,KAAK,cAAckB,KAAM,EAAEF,SAAUR,EAAcE,MAAOJ,EAAUF,YAC7Fa,YAAY,iBAGhB,4BACE,4BAAQF,KAAK,UAAb,gBCtDC,SAASI,EAAT,GAAsD,IAAnCC,EAAkC,EAAlCA,cAAoBC,GAAc,EAAnBC,IAAmB,EAAdD,cAElD,OACI,4BACI,4BAAKD,EAAcpB,MACnB,4BAAKoB,EAAcnB,SACnB,4BAAI,yBAAKsB,IAAKH,EAAclB,MAAOsB,IAAI,YACvC,4BAAI,uBAAGC,UAAU,cAAcL,EAAcjB,cAC7C,4BAAI,uBAAGsB,UAAU,cAAcL,EAAchB,cAC7C,4BAAI,4BAAQJ,KAAK,SAAS0B,QAASL,GAA/B,YCgCDM,MAnCf,YAA8C,IAAzBC,EAAwB,EAAxBA,QAASP,EAAe,EAAfA,aAKtBQ,EAASD,EAAQE,KAAI,SAACV,EAAeW,GAE1C,OAAO,kBAACZ,EAAD,CAAUG,IAAKS,EACXX,cAAeA,EACfC,aAAc,kBAAMA,EAAaU,SAK7C,OACE,yBAAKN,UAAU,eACb,+BACE,+BACE,4BACE,oCACA,uCACA,qCACA,2CACA,2CACA,yCAGJ,+BACGI,MCfIG,EAjBI,CACjB,CACEhC,KAAM,uBACNC,QAAS,WACTC,MAAO,gGACPC,YAAa,sJACbC,YAAa,4RAEf,CACEJ,KAAM,YACNC,QAAS,UACTC,MAAO,4EACPC,YAAa,mNACbC,YAAa,kKCgBF6B,MAzBf,WACE,MAA8B5B,mBAAS2B,GAAvC,mBAAOJ,EAAP,KAAgBM,EAAhB,KAeA,OACE,yBAAKT,UAAU,OACb,gCAAQ,uDACR,kBAAC,EAAD,CAAYG,QAASA,EAASP,aAfb,SAACc,GACpBD,EAAWN,EAAQQ,QAAO,SAAChB,EAAcW,GAAf,OAAwBA,IAAUI,SAe1D,kBAAC,EAAD,CAAcrC,aAXI,SAACuC,GACrBH,EAAW,GAAD,mBAAKN,GAAL,CAAcS,UCf5BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.d8446457.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\n\n// TODO: When the form is submitted, a new recipe should be created, and the form contents cleared.\n// TODO: Add the required input and textarea form elements.\n// TODO: Add the required submit and change handlers\n\nfunction RecipeCreate({createRecipe}) {\n//create initial data object for values\n  const initialData = {\n    name:\"\",\n    cuisine:\"\",\n    photo:\"\",\n    ingredients:\"\",\n    preparation: \"\",\n  } \n\n//create a useStateHook for formData and makes its value an object containing the initialData\nconst [tableData, setTableData] = useState(initialData)\n\n\n\n//create a handleChange function to handle the changes that take place on the form\n  const handleChange = ({target}) => \n  setTableData({...tableData, [target.name]:target.value})\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    //add the new data to the recipes database \n    createRecipe(tableData)\n    //clear the contents of the form when create the function\n    setTableData({...initialData})\n  }\n\n  return (\n    <form name=\"create\" onSubmit={handleSubmit}>\n      <table>\n        <tbody>\n          <tr>\n            <td>  \n              <input id=\"name\" name=\"name\" type=\"text\" onChange={handleChange} value={tableData.name} placeholder=\"Name\"/>\n            </td>\n            <td>\n            <input id=\"cusine\" name=\"cuisine\" type=\"text\" onChange={handleChange} value={tableData.cuisine} placeholder=\"Cuisine\"/>\n            </td>\n            <td>\n              <input id=\"photo\" name=\"photo\" type=\"url\" onChange={handleChange} value={tableData.photo} placeholder=\"Photo\"/>\n            </td>\n            <td>\n              <textarea id=\"ingredients\" name=\"ingredients\" rows={3}onChange={handleChange} value={tableData.ingredients} placeholder=\"Ingredients\"/>\n            </td>\n            <td>\n              <textarea id=\"preparation\" name=\"preparation\" rows={5}onChange={handleChange} value={tableData.preparation}\n                placeholder=\"Preparation\"\n              />\n            </td>\n            <td>\n              <button type=\"submit\">Create</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </form>\n  );\n}\n\nexport default RecipeCreate;\n","import React from \"react\"\n\n/*createTd component is used to turn the mapped data from recipes into a table row containing the table data for a new recipe. It also has a delete button that will allow users to delete old recipes*/\nexport default function CreateTd({recipeDetails, key, handleDelete}){\n    \n    return (\n        <tr>\n            <td>{recipeDetails.name}</td>\n            <td>{recipeDetails.cuisine}</td>\n            <td><img src={recipeDetails.photo} alt=\"recipe\" /></td>\n            <td><p className=\"content_td\">{recipeDetails.ingredients}</p></td>\n            <td><p className=\"content_td\">{recipeDetails.preparation}</p></td>  \n            <td><button name=\"delete\" onClick={handleDelete}>Delete</button></td>\n        </tr>\n    )\n}","import React from \"react\";\n\n//import the component createTd to use to create table row and data.\nimport CreateTd from \"./CreateTd\";\n\n\n// TODO: Display the list of recipes using the structure of table that is provided.\n  // TODO: Create at least one additional component that is used by this component.\n  // TODO: Each recipe row must have a delete button - <button name=\"delete\">Delete</button> - that deletes the post when clicked\nfunction RecipeList({recipes, handleDelete}) {\n  \n  //map the recipes data to create a row with data for each recipe\n  //use the createTd componenet to assist with the creation of the data\n \n  const recipe = recipes.map((recipeDetails, index)=> {\n   \n   return <CreateTd key={index}\n              recipeDetails={recipeDetails}\n              handleDelete={() => handleDelete(index)}\n    />\n  })\n  \n//Add all of the th to the thead \n  return (\n    <div className=\"recipe-list\">\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Cuisine</th>\n            <th>Photo</th>\n            <th>Ingredients</th>\n            <th>Preparation</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {recipe}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default RecipeList;\n","/**\n* This is the data that is initially loaded.\n* Please do not modify this file.\n*/\n\nconst RecipeData = [\n  {\n    name: \"Tuna Poke with Mango\",\n    cuisine: \"Hawaiian\",\n    photo: \"https://www.foodista.com/sites/default/files/styles/recype/public/tunapokebowlwithmango22.jpg\",\n    ingredients: \"1 package of sushi grade tuna. 1 cup cooked quinoa ½ avocado, sliced. ½ mango, cubed. 1 shredded carrot. 1 small sliced cucumber. poke sauce.\",\n    preparation: \"1. Chop tuna into cubes. 2. Toss with 1 tbsp sesame oil and 1 tbsp tamari. Set aside. 3. Layer your poke bowl starting with quinoa. 4. Whisk all poke sauce ingredients in a bowl and pour over the poke bowl. 5. Garnish with sesame seeds and furikake. 6. Top with chopped scallions.\"\n  },\n  {\n    name: \"Guacamole\",\n    cuisine: \"Mexican\",\n    photo: \"https://www.foodista.com/sites/default/files/styles/recype/public/017.jpg\",\n    ingredients: \"3 ripe avocados. ¾ cup finely chopped Roma tomato. 2 serrano chiles very finely chopped (seeded and deveined). 3 heaping tablespoons of finely chopped onion. 3 tablespoons of minced cilantro. Salt to taste\",\n    preparation: \"1. Remove the flesh of the avocados. 2. Mash the avocados with the back of a fork. 3. Add the other ingredients and incorporate evenly. 4. Add salt to taste.\"\n  },\n];\n\nexport default RecipeData;","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport RecipeCreate from \"./RecipeCreate\";\nimport RecipeList from \"./RecipeList\";\nimport RecipeData from \"./RecipeData\"\n\n// TODO: Add the ability for the <RecipeList /> component to list and delete an existing recipe.\n\n// TODO: Add the ability for the <RecipeCreate /> component to create new recipes.\nfunction App() {\n  const [recipes, setRecipes] = useState(RecipeData);\n\n  //create a handleDelete function thant can be passed into the value of a button and then deleted.\n  const handleDelete = (indexDelete) => {\n    setRecipes(recipes.filter((recipeDetails,index)=> index !== indexDelete))\n  }\n\n  //create a component to setup update recipe \n   const createRecipe = (newRecipe)=>{\n    setRecipes([...recipes, newRecipe])\n  }\n  \n\n  //Pass down the recipes, setRecipes to RecipeCreate\n  //Pass down the recipes,and handle delete to RecipeList\n  return (\n    <div className=\"App\">\n      <header><h1>Delicious Food Recipes</h1></header>\n      <RecipeList recipes={recipes} handleDelete={handleDelete} />\n      <RecipeCreate createRecipe={createRecipe}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}